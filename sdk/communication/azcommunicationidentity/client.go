//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azcommunicationidentity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client contains the methods for the CommunicationIdentity group.
// Don't use this type directly, use NewClient() instead.
type Client struct {
	endpoint string
	pl runtime.Pipeline
}


// CreateUser - Create a new identity, and optionally, an access token.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01
// options - ClientCreateUserOptions contains the optional parameters for the Client.CreateUser method.
func (client *Client) CreateUser(ctx context.Context, options *ClientCreateUserOptions) (ClientCreateUserResponse, error) {
	req, err := client.createUserCreateRequest(ctx, options)
	if err != nil {
		return ClientCreateUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCreateUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return ClientCreateUserResponse{}, runtime.NewResponseError(resp)
	}
	return client.createUserHandleResponse(resp)
}

// createUserCreateRequest creates the CreateUser request.
func (client *Client) createUserCreateRequest(ctx context.Context, options *ClientCreateUserOptions) (*policy.Request, error) {
	urlPath := "/identities"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// createUserHandleResponse handles the CreateUser response.
func (client *Client) createUserHandleResponse(resp *http.Response) (ClientCreateUserResponse, error) {
	result := ClientCreateUserResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessTokenResult); err != nil {
		return ClientCreateUserResponse{}, err
	}
	return result, nil
}

// DeleteUser - Delete the identity, revoke all tokens for the identity and delete all associated data.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01
// id - Identifier of the identity to be deleted.
// options - ClientDeleteUserOptions contains the optional parameters for the Client.DeleteUser method.
func (client *Client) DeleteUser(ctx context.Context, id string, options *ClientDeleteUserOptions) (ClientDeleteUserResponse, error) {
	req, err := client.deleteUserCreateRequest(ctx, id, options)
	if err != nil {
		return ClientDeleteUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDeleteUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ClientDeleteUserResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDeleteUserResponse{}, nil
}

// deleteUserCreateRequest creates the DeleteUser request.
func (client *Client) deleteUserCreateRequest(ctx context.Context, id string, options *ClientDeleteUserOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetToken - Issue a new token for an identity.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01
// id - Identifier of the identity to issue token for.
// body - Requested scopes for the new token.
// options - ClientGetTokenOptions contains the optional parameters for the Client.GetToken method.
func (client *Client) GetToken(ctx context.Context, id string, body AccessTokenRequest, options *ClientGetTokenOptions) (ClientGetTokenResponse, error) {
	req, err := client.getTokenCreateRequest(ctx, id, body, options)
	if err != nil {
		return ClientGetTokenResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetTokenResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetTokenResponse{}, runtime.NewResponseError(resp)
	}
	return client.getTokenHandleResponse(resp)
}

// getTokenCreateRequest creates the GetToken request.
func (client *Client) getTokenCreateRequest(ctx context.Context, id string, body AccessTokenRequest, options *ClientGetTokenOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}/:issueAccessToken"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// getTokenHandleResponse handles the GetToken response.
func (client *Client) getTokenHandleResponse(resp *http.Response) (ClientGetTokenResponse, error) {
	result := ClientGetTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return ClientGetTokenResponse{}, err
	}
	return result, nil
}

// GetTokenForTeamsUser - Exchange an Azure Active Directory (Azure AD) access token of a Teams user for a new Communication
// Identity access token with a matching expiration time.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01
// body - Request payload for the token exchange.
// options - ClientGetTokenForTeamsUserOptions contains the optional parameters for the Client.GetTokenForTeamsUser method.
func (client *Client) GetTokenForTeamsUser(ctx context.Context, body GetTokenForTeamsUserRequest, options *ClientGetTokenForTeamsUserOptions) (ClientGetTokenForTeamsUserResponse, error) {
	req, err := client.getTokenForTeamsUserCreateRequest(ctx, body, options)
	if err != nil {
		return ClientGetTokenForTeamsUserResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetTokenForTeamsUserResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetTokenForTeamsUserResponse{}, runtime.NewResponseError(resp)
	}
	return client.getTokenForTeamsUserHandleResponse(resp)
}

// getTokenForTeamsUserCreateRequest creates the GetTokenForTeamsUser request.
func (client *Client) getTokenForTeamsUserCreateRequest(ctx context.Context, body GetTokenForTeamsUserRequest, options *ClientGetTokenForTeamsUserOptions) (*policy.Request, error) {
	urlPath := "/teamsUser/:exchangeAccessToken"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// getTokenForTeamsUserHandleResponse handles the GetTokenForTeamsUser response.
func (client *Client) getTokenForTeamsUserHandleResponse(resp *http.Response) (ClientGetTokenForTeamsUserResponse, error) {
	result := ClientGetTokenForTeamsUserResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return ClientGetTokenForTeamsUserResponse{}, err
	}
	return result, nil
}

// RevokeTokens - Revoke all access tokens for the specific identity.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-10-01
// id - Identifier of the identity.
// options - ClientRevokeTokensOptions contains the optional parameters for the Client.RevokeTokens method.
func (client *Client) RevokeTokens(ctx context.Context, id string, options *ClientRevokeTokensOptions) (ClientRevokeTokensResponse, error) {
	req, err := client.revokeTokensCreateRequest(ctx, id, options)
	if err != nil {
		return ClientRevokeTokensResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientRevokeTokensResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ClientRevokeTokensResponse{}, runtime.NewResponseError(resp)
	}
	return ClientRevokeTokensResponse{}, nil
}

// revokeTokensCreateRequest creates the RevokeTokens request.
func (client *Client) revokeTokensCreateRequest(ctx context.Context, id string, options *ClientRevokeTokensOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}/:revokeAccessTokens"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

