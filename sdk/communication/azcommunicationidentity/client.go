//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// DO NOT EDIT.

package azcommunicationidentity

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	
)

type Client struct {
	endpoint string
	pl runtime.Pipeline
}

// ClientOptions contains the optional parameters when creating a Client.
type ClientOptions struct {
	azcore.ClientOptions
}

// NewClient creates a new instance of Azure Communication Identity Client with the specified values.
//   - endpoint - The communication resource, for example https://my-resource.communication.azure.com
//   - cred - an Azure AD credential, typically obtained via the azidentity module
//   - options - client options; pass nil to accept the default values
func NewClient(endpoint string, credential azcore.TokenCredential, options *ClientOptions) *Client {
	authPolicy := runtime.NewBearerTokenPolicy(credential, []string{"https://communication.azure.com//.default"}, nil)
	var conOptions = getClientOptions(options)
	conOptions.PerRetryPolicies = append(conOptions.PerRetryPolicies, authPolicy)
	pl := runtime.NewPipeline("azcommunicationidentity", "v1.0.0", runtime.PipelineOptions{}, &conOptions.ClientOptions)
	return &Client{
		endpoint: endpoint,
		pl: pl,
	}
}

func getClientOptions[T any](o *T) *T {
	if o == nil {
		return new(T)
	}
	return o
}

// Create - Create a new identity, and optionally, an access token.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-10-01
//   - options - ClientCreateOptions contains the optional parameters for the Client.Create method.
func (client *Client) Create(ctx context.Context, options *ClientCreateOptions) (ClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, options)
	if err != nil {
		return ClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return ClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *Client) createCreateRequest(ctx context.Context, options *ClientCreateOptions) (*policy.Request, error) {
	urlPath := "/identities"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Body != nil {
		return req, runtime.MarshalAsJSON(req, *options.Body)
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *Client) createHandleResponse(resp *http.Response) (ClientCreateResponse, error) {
	result := ClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessTokenResult); err != nil {
		return ClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete the identity, revoke all tokens for the identity and delete all associated data.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-10-01
//   - id - Identifier of the identity to be deleted.
//   - options - ClientDeleteOptions contains the optional parameters for the Client.Delete method.
func (client *Client) Delete(ctx context.Context, id string, options *ClientDeleteOptions) (ClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, id, options)
	if err != nil {
		return ClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return ClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *Client) deleteCreateRequest(ctx context.Context, id string, options *ClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// ExchangeTeamsUserAccessToken - Exchange an Azure Active Directory (Azure AD) access token of a Teams user for a new Communication
// Identity access token with a matching expiration time.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-10-01
//   - body - Request payload for the token exchange.
//   - options - ClientExchangeTeamsUserAccessTokenOptions contains the optional parameters for the Client.ExchangeTeamsUserAccessToken
//     method.
func (client *Client) ExchangeTeamsUserAccessToken(ctx context.Context, body TeamsUserExchangeTokenRequest, options *ClientExchangeTeamsUserAccessTokenOptions) (ClientExchangeTeamsUserAccessTokenResponse, error) {
	req, err := client.exchangeTeamsUserAccessTokenCreateRequest(ctx, body, options)
	if err != nil {
		return ClientExchangeTeamsUserAccessTokenResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientExchangeTeamsUserAccessTokenResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientExchangeTeamsUserAccessTokenResponse{}, runtime.NewResponseError(resp)
	}
	return client.exchangeTeamsUserAccessTokenHandleResponse(resp)
}

// exchangeTeamsUserAccessTokenCreateRequest creates the ExchangeTeamsUserAccessToken request.
func (client *Client) exchangeTeamsUserAccessTokenCreateRequest(ctx context.Context, body TeamsUserExchangeTokenRequest, options *ClientExchangeTeamsUserAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/teamsUser/:exchangeAccessToken"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// exchangeTeamsUserAccessTokenHandleResponse handles the ExchangeTeamsUserAccessToken response.
func (client *Client) exchangeTeamsUserAccessTokenHandleResponse(resp *http.Response) (ClientExchangeTeamsUserAccessTokenResponse, error) {
	result := ClientExchangeTeamsUserAccessTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return ClientExchangeTeamsUserAccessTokenResponse{}, err
	}
	return result, nil
}

// IssueAccessToken - Issue a new token for an identity.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-10-01
//   - id - Identifier of the identity to issue token for.
//   - body - Requested scopes for the new token.
//   - options - ClientIssueAccessTokenOptions contains the optional parameters for the Client.IssueAccessToken method.
func (client *Client) IssueAccessToken(ctx context.Context, id string, body AccessTokenRequest, options *ClientIssueAccessTokenOptions) (ClientIssueAccessTokenResponse, error) {
	req, err := client.issueAccessTokenCreateRequest(ctx, id, body, options)
	if err != nil {
		return ClientIssueAccessTokenResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientIssueAccessTokenResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientIssueAccessTokenResponse{}, runtime.NewResponseError(resp)
	}
	return client.issueAccessTokenHandleResponse(resp)
}

// issueAccessTokenCreateRequest creates the IssueAccessToken request.
func (client *Client) issueAccessTokenCreateRequest(ctx context.Context, id string, body AccessTokenRequest, options *ClientIssueAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}/:issueAccessToken"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// issueAccessTokenHandleResponse handles the IssueAccessToken response.
func (client *Client) issueAccessTokenHandleResponse(resp *http.Response) (ClientIssueAccessTokenResponse, error) {
	result := ClientIssueAccessTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return ClientIssueAccessTokenResponse{}, err
	}
	return result, nil
}

// RevokeAccessTokens - Revoke all access tokens for the specific identity.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-10-01
//   - id - Identifier of the identity.
//   - options - ClientRevokeAccessTokensOptions contains the optional parameters for the Client.RevokeAccessTokens method.
func (client *Client) RevokeAccessTokens(ctx context.Context, id string, options *ClientRevokeAccessTokensOptions) (ClientRevokeAccessTokensResponse, error) {
	req, err := client.revokeAccessTokensCreateRequest(ctx, id, options)
	if err != nil {
		return ClientRevokeAccessTokensResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientRevokeAccessTokensResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ClientRevokeAccessTokensResponse{}, runtime.NewResponseError(resp)
	}
	return ClientRevokeAccessTokensResponse{}, nil
}

// revokeAccessTokensCreateRequest creates the RevokeAccessTokens request.
func (client *Client) revokeAccessTokensCreateRequest(ctx context.Context, id string, options *ClientRevokeAccessTokensOptions) (*policy.Request, error) {
	urlPath := "/identities/{id}/:revokeAccessTokens"
	if id == "" {
		return nil, errors.New("parameter id cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{id}", url.PathEscape(id))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

